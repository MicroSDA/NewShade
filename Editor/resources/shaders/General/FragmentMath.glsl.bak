
// For BillinPhong lighting calculation
vec3 Get_TBNNormal(vec3 Normal, mat3 TBN_Matrix)
{
   vec3 TBN_Normal = Normal;
   TBN_Normal = 2.0 * TBN_Normal  - vec3(1.0, 1.0, 1.0);   
   TBN_Normal = normalize(TBN_Matrix * TBN_Normal);
   return TBN_Normal;
}

float TestShadow(sampler2D shadowMap, vec4 fragPosLightSpace)
{
	vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
	float objectNerestLight = texture(shadowMap, projCoords.xy).r;
	float factor = 1.0;
	if(projCoords.z > objectNerestLight)
		factor = 1.0- 0.4;
	
	return factor;
}
float ShadowCalculation(sampler2D shadowMap, vec3 lightPos, vec3 Normal, vec3 FragPos, vec4 fragPosLightSpace)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    // calculate bias (based on depth map resolution and slope)
    vec3 normal = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);
    // check whether current frag pos is in shadow
   // float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
    // PCF
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth> pcfDepth  ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;
    
    // keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
    if(projCoords.z > 1.0)
        shadow = 0.0;
        
    return shadow;
}