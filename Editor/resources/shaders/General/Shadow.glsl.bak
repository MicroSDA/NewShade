#type vertex
#version 460 core
#include "resources/shaders/General/Structures.glsl"

layout (location = 0) in vec3  a_Position;
layout (location = 4) in mat4  a_Transform;

// Direct lights SSBO buffer
layout (std430, binding = 2) restrict readonly buffer UDirectlight
{
	DirectLight u_DirectLight[];
};

void main()
{
	gl_Position = u_DirectLight[0].ViewMatrix *   vec4(a_Position, 1.0);
}


#type fragment
#version 460 core

//layout (location = 0) out vec4 FragColor;


/*float near = 0.01; 
float far  = 100.0; 
  
float LinearizeDepth(float depth) 
{
    float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * near * far) / (far + near - z * (far - near));	
}*/

void main()
{
	//float Depth = texture(gShadowMap, TexCoordOut).x;
    //Depth = 1.0 - (1.0 - Depth) * 25.0;
    //FragColor = vec4(Depth);
}